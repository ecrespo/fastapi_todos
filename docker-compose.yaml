services:
  api_todo:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - TZ=${TZ}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
    container_name: api_todo
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api_todo.rule=PathPrefix(`/`)"
      - "traefik.http.routers.api_todo.entrypoints=web"
      - "traefik.http.services.api_todo.loadbalancer.server.port=8000"
    ports:
      - 8000:8000
    networks:
      - api_todo_network
    volumes:
      - './logs:/app/logs'
      # Mount only the application source inside /app/app to avoid shadowing run.py and the virtualenv
      - './app:/app/app'
      - './.env:/app/.env:ro'
    depends_on:
      redis:
        condition: service_started
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: always

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - TZ=${TZ}
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
    container_name: celery_worker
    command: ["uv", "run", "celery", "-A", "app.shared.celery_app:celery_app", "worker", "--loglevel=INFO", "-Q", "celery"]
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - api_todo_network
    restart: always

  traefik:
    image: traefik:v2.10
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "${TRAEFIK_DASHBOARD_PORT:-8099}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - api_todo_network
    restart: always

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - .env
    environment:
      - TZ=${TZ}
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - api_todo_network
    restart: always

  redis:
    image: redis:7-alpine
    container_name: redis
    env_file:
      - .env
    environment:
      - TZ=${TZ}
    networks:
      - api_todo_network
    command: ["redis-server", "--appendonly", "yes"]
    restart: always

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file:
      - .env
    environment:
      - TZ=${TZ}
      - POSTGRES_DB=todos
      - POSTGRES_USER=todos
      - POSTGRES_PASSWORD=secret
    # Do not expose Postgres on the host by default to avoid port conflicts.
    # If you need host access from the host machine, set POSTGRES_HOST_PORT in .env
    # and uncomment the ports block below (defaults to 55432 if not set).
    ports:
      - ${POSTGRES_HOST_PORT:-55432}:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./sql/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - api_todo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

networks:
  api_todo_network:
    driver: bridge

volumes:
  pgdata: